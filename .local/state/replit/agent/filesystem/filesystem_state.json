{"file_contents":{"app/src/main/java/com/spreadlov/app/util/MyFirebaseMessagingService.kt":{"content":"package com.spreadlov.app.util\n\nimport android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.app.PendingIntent\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport androidx.core.app.NotificationCompat\nimport com.google.firebase.messaging.FirebaseMessagingService\nimport com.google.firebase.messaging.RemoteMessage\nimport com.spreadlov.app.MainActivity\nimport com.spreadlov.app.R\n\nclass MyFirebaseMessagingService : FirebaseMessagingService() {\n\n    override fun onMessageReceived(message: RemoteMessage) {\n        super.onMessageReceived(message)\n\n        message.notification?.let {\n            showNotification(it.title, it.body)\n        }\n\n        message.data.isNotEmpty().let {\n            val title = message.data[\"title\"]\n            val body = message.data[\"body\"]\n            if (title != null && body != null) {\n                showNotification(title, body)\n            }\n        }\n    }\n\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n    }\n\n    private fun showNotification(title: String?, message: String?) {\n        val channelId = \"spreadlov_notifications\"\n        val channelName = \"SpreadLov Notifications\"\n\n        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            val channel = NotificationChannel(\n                channelId,\n                channelName,\n                NotificationManager.IMPORTANCE_HIGH\n            ).apply {\n                description = \"Notifications from SpreadLov\"\n                enableLights(true)\n                enableVibration(true)\n            }\n            notificationManager.createNotificationChannel(channel)\n        }\n\n        val intent = Intent(this, MainActivity::class.java).apply {\n            flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP\n        }\n\n        val pendingIntent = PendingIntent.getActivity(\n            this,\n            0,\n            intent,\n            PendingIntent.FLAG_ONE_SHOT or PendingIntent.FLAG_IMMUTABLE\n        )\n\n        val notification = NotificationCompat.Builder(this, channelId)\n            .setContentTitle(title ?: \"SpreadLov\")\n            .setContentText(message ?: \"\")\n            .setSmallIcon(R.drawable.ic_notification)\n            .setColor(resources.getColor(R.color.pink_accent, null))\n            .setAutoCancel(true)\n            .setContentIntent(pendingIntent)\n            .setPriority(NotificationCompat.PRIORITY_HIGH)\n            .build()\n\n        notificationManager.notify(System.currentTimeMillis().toInt(), notification)\n    }\n}\n","size_bytes":2692},"validate_project.sh":{"content":"#!/bin/bash\n\necho \"================================================\"\necho \"   SpreadLov Android Project - Validation\"\necho \"================================================\"\necho \"\"\necho \"⚠️  IMPORTANT: This is an Android Studio project\"\necho \"   It CANNOT run in Replit - download and import\"\necho \"   into Android Studio on your local machine.\"\necho \"\"\necho \"================================================\"\necho \"\"\n\necho \"✅ Project Structure Validation:\"\necho \"\"\n\n# Check root files\necho \"📁 Root Configuration Files:\"\n[ -f \"build.gradle.kts\" ] && echo \"  ✓ build.gradle.kts\" || echo \"  ✗ build.gradle.kts MISSING\"\n[ -f \"settings.gradle.kts\" ] && echo \"  ✓ settings.gradle.kts\" || echo \"  ✗ settings.gradle.kts MISSING\"\n[ -f \"gradle.properties\" ] && echo \"  ✓ gradle.properties\" || echo \"  ✗ gradle.properties MISSING\"\n[ -f \".gitignore\" ] && echo \"  ✓ .gitignore\" || echo \"  ✗ .gitignore MISSING\"\necho \"\"\n\n# Check app module\necho \"📁 App Module Files:\"\n[ -f \"app/build.gradle.kts\" ] && echo \"  ✓ app/build.gradle.kts\" || echo \"  ✗ app/build.gradle.kts MISSING\"\n[ -f \"app/google-services.json\" ] && echo \"  ✓ app/google-services.json (placeholder)\" || echo \"  ✗ google-services.json MISSING\"\n[ -f \"app/proguard-rules.pro\" ] && echo \"  ✓ app/proguard-rules.pro\" || echo \"  ✗ proguard-rules.pro MISSING\"\necho \"\"\n\n# Check manifest\necho \"📁 Android Manifest:\"\n[ -f \"app/src/main/AndroidManifest.xml\" ] && echo \"  ✓ AndroidManifest.xml\" || echo \"  ✗ AndroidManifest.xml MISSING\"\necho \"\"\n\n# Check Kotlin files\necho \"📁 Kotlin Source Files:\"\n[ -f \"app/src/main/java/com/spreadlov/app/SplashActivity.kt\" ] && echo \"  ✓ SplashActivity.kt\" || echo \"  ✗ SplashActivity.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/MainActivity.kt\" ] && echo \"  ✓ MainActivity.kt\" || echo \"  ✗ MainActivity.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/OfflineActivity.kt\" ] && echo \"  ✓ OfflineActivity.kt\" || echo \"  ✗ OfflineActivity.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/AboutActivity.kt\" ] && echo \"  ✓ AboutActivity.kt\" || echo \"  ✗ AboutActivity.kt MISSING\"\necho \"\"\n\n# Check utilities\necho \"📁 Utility Classes:\"\n[ -f \"app/src/main/java/com/spreadlov/app/util/WebViewClientHelper.kt\" ] && echo \"  ✓ WebViewClientHelper.kt\" || echo \"  ✗ WebViewClientHelper.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/util/NetworkUtils.kt\" ] && echo \"  ✓ NetworkUtils.kt\" || echo \"  ✗ NetworkUtils.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/util/NotificationUtils.kt\" ] && echo \"  ✓ NotificationUtils.kt\" || echo \"  ✗ NotificationUtils.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/util/IntentUtils.kt\" ] && echo \"  ✓ IntentUtils.kt\" || echo \"  ✗ IntentUtils.kt MISSING\"\n[ -f \"app/src/main/java/com/spreadlov/app/util/MyFirebaseMessagingService.kt\" ] && echo \"  ✓ MyFirebaseMessagingService.kt\" || echo \"  ✗ MyFirebaseMessagingService.kt MISSING\"\necho \"\"\n\n# Check layouts\necho \"📁 XML Layouts:\"\n[ -f \"app/src/main/res/layout/activity_splash.xml\" ] && echo \"  ✓ activity_splash.xml\" || echo \"  ✗ activity_splash.xml MISSING\"\n[ -f \"app/src/main/res/layout/activity_main.xml\" ] && echo \"  ✓ activity_main.xml\" || echo \"  ✗ activity_main.xml MISSING\"\n[ -f \"app/src/main/res/layout/activity_offline.xml\" ] && echo \"  ✓ activity_offline.xml\" || echo \"  ✗ activity_offline.xml MISSING\"\n[ -f \"app/src/main/res/layout/activity_about.xml\" ] && echo \"  ✓ activity_about.xml\" || echo \"  ✗ activity_about.xml MISSING\"\necho \"\"\n\n# Check resources\necho \"📁 Resource Files:\"\n[ -f \"app/src/main/res/values/colors.xml\" ] && echo \"  ✓ colors.xml\" || echo \"  ✗ colors.xml MISSING\"\n[ -f \"app/src/main/res/values/strings.xml\" ] && echo \"  ✓ strings.xml\" || echo \"  ✗ strings.xml MISSING\"\n[ -f \"app/src/main/res/values/themes.xml\" ] && echo \"  ✓ themes.xml\" || echo \"  ✗ themes.xml MISSING\"\n[ -f \"app/src/main/res/menu/main_menu.xml\" ] && echo \"  ✓ main_menu.xml\" || echo \"  ✗ main_menu.xml MISSING\"\necho \"\"\n\n# Check drawables\necho \"📁 Drawable Resources:\"\n[ -f \"app/src/main/res/drawable/app_logo.xml\" ] && echo \"  ✓ app_logo.xml\" || echo \"  ✗ app_logo.xml MISSING\"\n[ -f \"app/src/main/res/drawable/ic_notification.xml\" ] && echo \"  ✓ ic_notification.xml\" || echo \"  ✗ ic_notification.xml MISSING\"\necho \"\"\n\n# Check documentation\necho \"📁 Documentation Files:\"\n[ -f \"README.md\" ] && echo \"  ✓ README.md\" || echo \"  ✗ README.md MISSING\"\n[ -f \"IMPORT_INSTRUCTIONS.md\" ] && echo \"  ✓ IMPORT_INSTRUCTIONS.md\" || echo \"  ✗ IMPORT_INSTRUCTIONS.md MISSING\"\necho \"\"\n\necho \"================================================\"\necho \"\"\necho \"📊 Project Summary:\"\necho \"\"\necho \"  Package: com.spreadlov.app\"\necho \"  Min SDK: 24 (Android 7.0)\"\necho \"  Target SDK: 35 (Android 15)\"\necho \"  Language: Kotlin\"\necho \"  Theme: Dark (#121212) + Pink Accent (#E91E63)\"\necho \"\"\necho \"================================================\"\necho \"\"\necho \"🚀 Next Steps:\"\necho \"\"\necho \"  1. Download this Replit project to your computer\"\necho \"  2. Open Android Studio\"\necho \"  3. File → Open → Select 'SpreadLov' folder\"\necho \"  4. Replace app/google-services.json with real Firebase file\"\necho \"  5. Sync Gradle and Build\"\necho \"  6. Run on Android device/emulator\"\necho \"\"\necho \"📖 Full instructions: IMPORT_INSTRUCTIONS.md\"\necho \"\"\necho \"================================================\"\necho \"\"\necho \"✅ All Android Studio project files generated!\"\necho \"   Ready for import into Android Studio.\"\necho \"\"\n","size_bytes":5529},"app/src/main/java/com/spreadlov/app/util/NetworkUtils.kt":{"content":"package com.spreadlov.app.util\n\nimport android.content.Context\nimport android.net.ConnectivityManager\nimport android.net.NetworkCapabilities\nimport android.os.Build\n\nobject NetworkUtils {\n\n    fun isNetworkAvailable(context: Context): Boolean {\n        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n        \n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            val network = connectivityManager.activeNetwork ?: return false\n            val capabilities = connectivityManager.getNetworkCapabilities(network) ?: return false\n            \n            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ||\n            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_CELLULAR) ||\n            capabilities.hasTransport(NetworkCapabilities.TRANSPORT_ETHERNET)\n        } else {\n            @Suppress(\"DEPRECATION\")\n            val networkInfo = connectivityManager.activeNetworkInfo\n            @Suppress(\"DEPRECATION\")\n            networkInfo?.isConnected == true\n        }\n    }\n}\n","size_bytes":1081},"app/src/main/java/com/spreadlov/app/SplashActivity.kt":{"content":"package com.spreadlov.app\n\nimport android.animation.ObjectAnimator\nimport android.content.Intent\nimport android.os.Bundle\nimport android.os.Handler\nimport android.os.Looper\nimport android.view.View\nimport android.view.animation.AccelerateInterpolator\nimport androidx.appcompat.app.AppCompatActivity\nimport com.spreadlov.app.util.NetworkUtils\n\nclass SplashActivity : AppCompatActivity() {\n\n    private val splashDelay: Long = 2000\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_splash)\n\n        val logoView = findViewById<View>(R.id.splash_logo)\n        val appNameView = findViewById<View>(R.id.splash_app_name)\n\n        val fadeInLogo = ObjectAnimator.ofFloat(logoView, \"alpha\", 0f, 1f).apply {\n            duration = 1000\n            interpolator = AccelerateInterpolator()\n        }\n\n        val fadeInName = ObjectAnimator.ofFloat(appNameView, \"alpha\", 0f, 1f).apply {\n            duration = 1000\n            startDelay = 300\n            interpolator = AccelerateInterpolator()\n        }\n\n        fadeInLogo.start()\n        fadeInName.start()\n\n        Handler(Looper.getMainLooper()).postDelayed({\n            navigateToNextScreen()\n        }, splashDelay)\n    }\n\n    private fun navigateToNextScreen() {\n        val intent = if (NetworkUtils.isNetworkAvailable(this)) {\n            Intent(this, MainActivity::class.java)\n        } else {\n            Intent(this, OfflineActivity::class.java)\n        }\n        startActivity(intent)\n        finish()\n        overridePendingTransition(android.R.anim.fade_in, android.R.anim.fade_out)\n    }\n}\n","size_bytes":1641},"app/src/main/java/com/spreadlov/app/MainActivity.kt":{"content":"package com.spreadlov.app\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.view.View\nimport android.webkit.WebView\nimport android.widget.ProgressBar\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\nimport com.spreadlov.app.util.IntentUtils\nimport com.spreadlov.app.util.NetworkUtils\nimport com.spreadlov.app.util.NotificationUtils\nimport com.spreadlov.app.util.WebViewClientHelper\n\nclass MainActivity : AppCompatActivity() {\n\n    private lateinit var webView: WebView\n    private lateinit var swipeRefreshLayout: SwipeRefreshLayout\n    private lateinit var progressBar: ProgressBar\n    \n    private var backPressedTime: Long = 0\n    private val backPressDelay: Long = 2000\n\n    companion object {\n        private const val WEBSITE_URL = \"https://spreadlov.com\"\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        webView = findViewById(R.id.webView)\n        swipeRefreshLayout = findViewById(R.id.swipeRefresh)\n        progressBar = findViewById(R.id.progressBar)\n\n        setupWebView()\n        setupSwipeRefresh()\n        \n        NotificationUtils.requestNotificationPermission(this)\n\n        if (NetworkUtils.isNetworkAvailable(this)) {\n            webView.loadUrl(WEBSITE_URL)\n        } else {\n            startActivity(Intent(this, OfflineActivity::class.java))\n            finish()\n        }\n    }\n\n    private fun setupWebView() {\n        WebViewClientHelper.setupWebView(\n            webView = webView,\n            context = this,\n            onPageStarted = { \n                progressBar.visibility = ProgressBar.VISIBLE\n                swipeRefreshLayout.isRefreshing = true\n            },\n            onPageFinished = { \n                progressBar.visibility = ProgressBar.GONE\n                swipeRefreshLayout.isRefreshing = false\n            },\n            onError = {\n                if (!NetworkUtils.isNetworkAvailable(this)) {\n                    startActivity(Intent(this, OfflineActivity::class.java))\n                    finish()\n                }\n            }\n        )\n    }\n\n    private fun setupSwipeRefresh() {\n        swipeRefreshLayout.setColorSchemeResources(R.color.pink_accent)\n        \n        swipeRefreshLayout.setOnChildScrollUpCallback { _, _ ->\n            webView.scrollY > 0\n        }\n        \n        swipeRefreshLayout.setOnRefreshListener {\n            if (NetworkUtils.isNetworkAvailable(this)) {\n                webView.reload()\n            } else {\n                swipeRefreshLayout.isRefreshing = false\n                Toast.makeText(this, \"No internet connection\", Toast.LENGTH_SHORT).show()\n            }\n        }\n    }\n\n    override fun onBackPressed() {\n        if (webView.canGoBack()) {\n            webView.goBack()\n        } else {\n            if (backPressedTime + backPressDelay > System.currentTimeMillis()) {\n                super.onBackPressed()\n            } else {\n                Toast.makeText(this, \"Press back again to exit\", Toast.LENGTH_SHORT).show()\n            }\n            backPressedTime = System.currentTimeMillis()\n        }\n    }\n\n    override fun onSaveInstanceState(outState: Bundle) {\n        super.onSaveInstanceState(outState)\n        webView.saveState(outState)\n    }\n\n    override fun onRestoreInstanceState(savedInstanceState: Bundle) {\n        super.onRestoreInstanceState(savedInstanceState)\n        webView.restoreState(savedInstanceState)\n    }\n}\n","size_bytes":3561},"app/src/main/java/com/spreadlov/app/util/IntentUtils.kt":{"content":"package com.spreadlov.app.util\n\nimport android.content.ActivityNotFoundException\nimport android.content.Context\nimport android.content.Intent\nimport android.net.Uri\nimport android.widget.Toast\n\nobject IntentUtils {\n\n    private const val PLAY_STORE_PACKAGE = \"com.android.vending\"\n    private const val APP_PACKAGE_NAME = \"com.spreadlov.app\"\n\n    fun shareApp(context: Context) {\n        val shareText = \"Check out SpreadLov – a free, genuine dating platform! 💕\\nhttps://spreadlov.com\"\n        val shareIntent = Intent(Intent.ACTION_SEND).apply {\n            type = \"text/plain\"\n            putExtra(Intent.EXTRA_TEXT, shareText)\n            putExtra(Intent.EXTRA_SUBJECT, \"SpreadLov - Dating App\")\n        }\n        context.startActivity(Intent.createChooser(shareIntent, \"Share SpreadLov via\"))\n    }\n\n    fun rateApp(context: Context) {\n        try {\n            val playStoreIntent = Intent(Intent.ACTION_VIEW).apply {\n                data = Uri.parse(\"market://details?id=$APP_PACKAGE_NAME\")\n                setPackage(PLAY_STORE_PACKAGE)\n            }\n            \n            if (isPlayStoreInstalled(context)) {\n                context.startActivity(playStoreIntent)\n            } else {\n                openPlayStoreInBrowser(context)\n            }\n        } catch (e: ActivityNotFoundException) {\n            openPlayStoreInBrowser(context)\n        } catch (e: Exception) {\n            Toast.makeText(context, \"Unable to open Play Store\", Toast.LENGTH_SHORT).show()\n        }\n    }\n\n    private fun isPlayStoreInstalled(context: Context): Boolean {\n        return try {\n            context.packageManager.getPackageInfo(PLAY_STORE_PACKAGE, 0)\n            true\n        } catch (e: Exception) {\n            false\n        }\n    }\n\n    private fun openPlayStoreInBrowser(context: Context) {\n        val webIntent = Intent(\n            Intent.ACTION_VIEW,\n            Uri.parse(\"https://play.google.com/store/apps/details?id=$APP_PACKAGE_NAME\")\n        )\n        context.startActivity(webIntent)\n    }\n}\n","size_bytes":2014},"app/src/main/java/com/spreadlov/app/util/WebViewClientHelper.kt":{"content":"package com.spreadlov.app.util\n\nimport android.content.Context\nimport android.content.Intent\nimport android.graphics.Bitmap\nimport android.net.Uri\nimport android.webkit.*\nimport androidx.webkit.WebViewFeature\nimport androidx.webkit.WebSettingsCompat\nimport androidx.webkit.WebViewFeature.SAFE_BROWSING_ENABLE\n\nobject WebViewClientHelper {\n\n    private const val ALLOWED_DOMAIN = \"spreadlov.com\"\n\n    fun setupWebView(\n        webView: WebView,\n        context: Context,\n        onPageStarted: () -> Unit,\n        onPageFinished: () -> Unit,\n        onError: () -> Unit\n    ) {\n        webView.settings.apply {\n            javaScriptEnabled = true\n            domStorageEnabled = true\n            databaseEnabled = true\n            cacheMode = WebSettings.LOAD_DEFAULT\n            mixedContentMode = WebSettings.MIXED_CONTENT_NEVER_ALLOW\n            allowFileAccess = false\n            allowContentAccess = true\n            setSupportMultipleWindows(false)\n            javaScriptCanOpenWindowsAutomatically = false\n            mediaPlaybackRequiresUserGesture = false\n            setSupportZoom(true)\n            builtInZoomControls = true\n            displayZoomControls = false\n        }\n\n        if (WebViewFeature.isFeatureSupported(SAFE_BROWSING_ENABLE)) {\n            WebSettingsCompat.setSafeBrowsingEnabled(webView.settings, true)\n        }\n\n        CookieManager.getInstance().apply {\n            setAcceptCookie(true)\n            setAcceptThirdPartyCookies(webView, true)\n        }\n\n        webView.webViewClient = object : WebViewClient() {\n            override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {\n                super.onPageStarted(view, url, favicon)\n                onPageStarted()\n            }\n\n            override fun onPageFinished(view: WebView?, url: String?) {\n                super.onPageFinished(view, url)\n                onPageFinished()\n            }\n\n            override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {\n                val url = request?.url.toString()\n                \n                return when {\n                    url.contains(ALLOWED_DOMAIN) -> false\n                    url.startsWith(\"mailto:\") || url.startsWith(\"tel:\") || \n                    url.startsWith(\"whatsapp:\") || url.startsWith(\"sms:\") -> {\n                        handleExternalIntent(context, url)\n                        true\n                    }\n                    else -> {\n                        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n                        context.startActivity(intent)\n                        true\n                    }\n                }\n            }\n\n            override fun onReceivedError(\n                view: WebView?,\n                request: WebResourceRequest?,\n                error: WebResourceError?\n            ) {\n                super.onReceivedError(view, request, error)\n                if (request?.isForMainFrame == true) {\n                    onError()\n                }\n            }\n        }\n\n        webView.webChromeClient = object : WebChromeClient() {\n            override fun onProgressChanged(view: WebView?, newProgress: Int) {\n                super.onProgressChanged(view, newProgress)\n            }\n\n            override fun onShowFileChooser(\n                webView: WebView?,\n                filePathCallback: ValueCallback<Array<Uri>>?,\n                fileChooserParams: FileChooserParams?\n            ): Boolean {\n                return true\n            }\n        }\n    }\n\n    private fun handleExternalIntent(context: Context, url: String) {\n        try {\n            val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n            context.startActivity(intent)\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n}\n","size_bytes":3823},"app/src/main/java/com/spreadlov/app/AboutActivity.kt":{"content":"package com.spreadlov.app\n\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport com.spreadlov.app.util.IntentUtils\n\nclass AboutActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_about)\n\n        setSupportActionBar(findViewById(R.id.toolbar))\n        supportActionBar?.apply {\n            setDisplayHomeAsUpEnabled(true)\n            setDisplayShowHomeEnabled(true)\n            title = \"About SpreadLov\"\n        }\n\n        val versionTextView = findViewById<TextView>(R.id.tv_version)\n        versionTextView.text = \"Version ${BuildConfig.VERSION_NAME}\"\n\n        findViewById<Button>(R.id.btn_privacy_policy).setOnClickListener {\n            openUrl(\"https://spreadlov.com/privacy-policy\")\n        }\n\n        findViewById<Button>(R.id.btn_terms).setOnClickListener {\n            openUrl(\"https://spreadlov.com/terms\")\n        }\n\n        findViewById<Button>(R.id.btn_share_app).setOnClickListener {\n            IntentUtils.shareApp(this)\n        }\n    }\n\n    private fun openUrl(url: String) {\n        val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))\n        startActivity(intent)\n    }\n\n    override fun onSupportNavigateUp(): Boolean {\n        onBackPressed()\n        return true\n    }\n}\n","size_bytes":1459},"app/src/main/java/com/spreadlov/app/util/NotificationUtils.kt":{"content":"package com.spreadlov.app.util\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.pm.PackageManager\nimport android.os.Build\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\n\nobject NotificationUtils {\n\n    private const val NOTIFICATION_PERMISSION_CODE = 100\n\n    fun requestNotificationPermission(activity: Activity) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {\n            if (ContextCompat.checkSelfPermission(\n                    activity,\n                    Manifest.permission.POST_NOTIFICATIONS\n                ) != PackageManager.PERMISSION_GRANTED\n            ) {\n                ActivityCompat.requestPermissions(\n                    activity,\n                    arrayOf(Manifest.permission.POST_NOTIFICATIONS),\n                    NOTIFICATION_PERMISSION_CODE\n                )\n            }\n        }\n    }\n}\n","size_bytes":908},"README.md":{"content":"# SpreadLov Android App\n\nA secure, dark-themed WebView-based Android application for the SpreadLov dating platform (https://spreadlov.com).\n\n## 📱 App Overview\n\n- **Package Name:** `com.spreadlov.app`\n- **Minimum SDK:** 24 (Android 7.0)\n- **Target SDK:** 35 (Android 15)\n- **Language:** Kotlin\n- **Build System:** Gradle (KTS)\n- **Theme:** Dark mode with pink accent (#E91E63)\n\n## ✨ Features\n\n### Core Features\n- ✅ **Splash Screen** - Animated logo and app name with fade-in effect\n- ✅ **Secure WebView** - HTTPS-only connection to spreadlov.com\n- ✅ **Offline Detection** - Auto-redirect to offline screen when no internet\n- ✅ **Swipe to Refresh** - Manual page reload with pink accent loader\n- ✅ **Push Notifications** - Firebase Cloud Messaging integration\n- ✅ **About Screen** - App info, version, and links\n- ✅ **Back Navigation** - WebView history navigation with exit confirmation\n- ✅ **3-Dot Menu** - About, Share App, and Rate Us options\n\n### Security Features\n- 🔒 HTTPS-only (no cleartext traffic)\n- 🔒 Domain restriction to spreadlov.com\n- 🔒 Safe Browsing enabled\n- 🔒 Mixed content blocked\n- 🔒 External links open in system browser\n\n## 📂 Project Structure\n\n```\nSpreadLov/\n├── app/\n│   ├── src/main/\n│   │   ├── AndroidManifest.xml\n│   │   ├── java/com/spreadlov/app/\n│   │   │   ├── SplashActivity.kt\n│   │   │   ├── MainActivity.kt\n│   │   │   ├── OfflineActivity.kt\n│   │   │   ├── AboutActivity.kt\n│   │   │   └── util/\n│   │   │       ├── WebViewClientHelper.kt\n│   │   │       ├── NetworkUtils.kt\n│   │   │       ├── NotificationUtils.kt\n│   │   │       ├── IntentUtils.kt\n│   │   │       └── MyFirebaseMessagingService.kt\n│   │   └── res/\n│   │       ├── layout/\n│   │       ├── values/\n│   │       ├── menu/\n│   │       ├── drawable/\n│   │       └── mipmap-anydpi-v26/\n│   ├── build.gradle.kts\n│   ├── google-services.json (PLACEHOLDER - Replace with real file)\n│   └── proguard-rules.pro\n├── build.gradle.kts\n├── settings.gradle.kts\n├── gradle.properties\n└── README.md\n```\n\n## 🚀 How to Import into Android Studio\n\n### Step 1: Download/Clone the Project\n1. Download this project folder to your local machine\n2. Extract if it's in a ZIP file\n\n### Step 2: Open in Android Studio\n1. Open **Android Studio**\n2. Click **File → Open**\n3. Navigate to the `SpreadLov` folder\n4. Click **OK**\n5. Wait for Gradle sync to complete\n\n### Step 3: Configure Firebase (Important!)\n1. Go to [Firebase Console](https://console.firebase.google.com/)\n2. Create a new project or select existing project\n3. Add an Android app with package name: `com.spreadlov.app`\n4. Download the **google-services.json** file\n5. **Replace** the placeholder `app/google-services.json` with your real file\n\n### Step 4: Sync and Build\n1. Click **File → Sync Project with Gradle Files**\n2. Wait for sync to complete\n3. Click **Build → Make Project**\n\n### Step 5: Run the App\n1. Connect an Android device or start an emulator\n2. Click the **Run** button (green triangle)\n3. Select your device\n4. The app will install and launch\n\n## ⚙️ Configuration\n\n### App Branding\n- App name: Edit `app/src/main/res/values/strings.xml`\n- Colors: Edit `app/src/main/res/values/colors.xml`\n- Logo: Replace `app/src/main/res/drawable/app_logo.xml` with your logo\n\n### App Icon\n- Replace launcher icons in `app/src/main/res/mipmap-*/` folders\n- Or use **Image Asset Studio** in Android Studio:\n  - Right-click `res` → New → Image Asset\n  - Configure your icon and click **Next**\n\n### Version & Package\n- Edit `app/build.gradle.kts`:\n  - `versionCode` - Increment for each release\n  - `versionName` - User-facing version number\n  - `applicationId` - Package name (already set to `com.spreadlov.app`)\n\n## 📦 Dependencies\n\n```kotlin\nandroidx.core:core-ktx:1.13.1\nandroidx.appcompat:appcompat:1.7.0\ncom.google.android.material:material:1.12.0\nandroidx.constraintlayout:constraintlayout:2.2.0\nandroidx.webkit:webkit:1.10.0\nandroidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01\ncom.google.firebase:firebase-messaging:24.1.0\n```\n\n## 🔔 Push Notifications Setup\n\n1. **Firebase Setup** (see Step 3 above)\n2. **Test Notifications:**\n   - Go to Firebase Console → Cloud Messaging\n   - Click **Send your first message**\n   - Enter title and message\n   - Select your app\n   - Send test notification\n\n3. **Production:** Integrate with your backend to send notifications via FCM API\n\n## 🎨 Color Scheme\n\n- **Dark Background:** `#121212`\n- **Pink Accent:** `#E91E63`\n- **Light Gray:** `#B0B0B0`\n- **Text:** White/Light Gray\n\n## 🔐 Permissions\n\nThe app requests these permissions:\n- `INTERNET` - Load website content\n- `ACCESS_NETWORK_STATE` - Check connectivity\n- `POST_NOTIFICATIONS` - Show push notifications (Android 13+)\n\n## 📝 Release Build\n\n### Generate Signed APK\n1. **Create Keystore:**\n   - Build → Generate Signed Bundle/APK\n   - Select APK → Next\n   - Create new keystore and fill in details\n   - **Save keystore credentials safely!**\n\n2. **Build Release APK:**\n   - Build → Generate Signed Bundle/APK\n   - Select your keystore\n   - Choose **release** build variant\n   - Click Finish\n\n3. **APK Location:**\n   - `app/release/app-release.apk`\n\n### Publish to Play Store\n1. Create a Google Play Developer account\n2. Build → Generate Signed Bundle/APK → **Android App Bundle (AAB)**\n3. Upload AAB to Play Console\n4. Fill in store listing details\n5. Submit for review\n\n## 🐛 Troubleshooting\n\n### Gradle Sync Failed\n- Check your internet connection\n- File → Invalidate Caches → Invalidate and Restart\n- Update Android Studio to latest version\n\n### google-services.json Error\n- Make sure you replaced the placeholder file\n- Verify package name matches: `com.spreadlov.app`\n- Re-download from Firebase Console\n\n### App Crashes on Startup\n- Check Logcat for error messages\n- Verify internet permission in AndroidManifest.xml\n- Ensure device/emulator has internet connection\n\n### WebView Not Loading\n- Check if https://spreadlov.com is accessible\n- Verify device has internet connection\n- Check Logcat for WebView errors\n\n## 📄 License\n\nThis project is created for SpreadLov. All rights reserved.\n\n## 📞 Support\n\nFor issues or questions:\n- Website: https://spreadlov.com\n- Review app logs in Android Studio Logcat\n- Check Firebase Console for push notification issues\n\n---\n\n**Note:** This is a reference Android Studio project. It cannot run in Replit - you must import it into Android Studio on your local machine to build and run the APK.\n","size_bytes":6737},"app/src/main/java/com/spreadlov/app/OfflineActivity.kt":{"content":"package com.spreadlov.app\n\nimport android.content.Intent\nimport android.os.Bundle\nimport android.widget.Button\nimport androidx.appcompat.app.AppCompatActivity\nimport com.spreadlov.app.util.NetworkUtils\n\nclass OfflineActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_offline)\n\n        val retryButton = findViewById<Button>(R.id.btn_retry)\n        retryButton.setOnClickListener {\n            if (NetworkUtils.isNetworkAvailable(this)) {\n                val intent = Intent(this, MainActivity::class.java)\n                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK\n                startActivity(intent)\n                finish()\n            }\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        if (NetworkUtils.isNetworkAvailable(this)) {\n            val intent = Intent(this, MainActivity::class.java)\n            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK\n            startActivity(intent)\n            finish()\n        }\n    }\n}\n","size_bytes":1155},"IMPORT_INSTRUCTIONS.md":{"content":"# 🚀 Android Studio Import Instructions\n\n## ⚠️ IMPORTANT: This is an Android Reference Project\n\nThis project contains **complete Android Studio project files** but **CANNOT run in Replit**. You must import it into Android Studio on your local computer.\n\n## Quick Start Guide\n\n### 1️⃣ Download This Project\n```bash\n# Clone or download this Replit project to your local machine\n# Or use Replit's download feature to get a ZIP file\n```\n\n### 2️⃣ Open in Android Studio\n1. Launch **Android Studio**\n2. Click **File → Open**\n3. Navigate to the downloaded `SpreadLov` folder\n4. Click **OK**\n5. Wait for Gradle sync (may take 2-5 minutes first time)\n\n### 3️⃣ Configure Firebase\n**CRITICAL:** The `app/google-services.json` is a placeholder and will cause build errors.\n\n1. Go to https://console.firebase.google.com/\n2. Create a new project named \"SpreadLov\"\n3. Click **Add app → Android**\n4. Enter package name: `com.spreadlov.app`\n5. Download **google-services.json**\n6. **Replace** `app/google-services.json` with your downloaded file\n\n### 4️⃣ Build & Run\n1. Connect Android device via USB (with USB debugging enabled)\n   - OR start Android emulator in Android Studio\n2. Click **Run** button (green triangle icon)\n3. Select your device\n4. App will install and launch!\n\n## ✅ What's Included\n\nAll these files are ready to use:\n- ✅ Kotlin activities (Splash, Main, Offline, About)\n- ✅ Utility classes (WebView, Network, Notifications, Intents)\n- ✅ XML layouts (all 4 screens)\n- ✅ Resource files (colors, strings, themes, menu)\n- ✅ Gradle build files (KTS format)\n- ✅ AndroidManifest.xml with permissions\n- ✅ Drawable resources and app icons\n- ✅ ProGuard rules for release builds\n\n## 🎨 Customization\n\n### Change App Name\nEdit: `app/src/main/res/values/strings.xml`\n```xml\n<string name=\"app_name\">YourAppName</string>\n```\n\n### Change Colors\nEdit: `app/src/main/res/values/colors.xml`\n```xml\n<color name=\"pink_accent\">#E91E63</color>\n<color name=\"dark_background\">#121212</color>\n```\n\n### Change App Icon\n1. Right-click `res` folder → **New → Image Asset**\n2. Select icon type: Launcher Icons\n3. Upload your logo image\n4. Configure and click **Next → Finish**\n\n### Update Version\nEdit: `app/build.gradle.kts`\n```kotlin\nversionCode = 1  // Increment for each release\nversionName = \"1.0.0\"  // User-facing version\n```\n\n## 🐛 Common Issues\n\n### \"google-services.json missing\" Error\n- Download real file from Firebase Console\n- Replace placeholder file in `app/` folder\n- Sync Gradle again\n\n### Gradle Sync Failed\n- Check internet connection\n- Update Android Studio to latest version\n- File → Invalidate Caches → Restart\n\n### App Won't Install\n- Enable USB debugging on device\n- Check device is connected: `adb devices`\n- Try: Build → Clean Project → Rebuild\n\n## 📱 Testing\n\n1. **Test on Emulator:**\n   - Tools → Device Manager → Create Virtual Device\n   - Select device (Pixel 6) → Next\n   - Select system image (API 35) → Next → Finish\n\n2. **Test on Real Device:**\n   - Enable Developer Options on your Android phone\n   - Enable USB Debugging\n   - Connect via USB and allow debugging prompt\n\n## 🚀 Release Build\n\n### Generate Signed APK\n1. Build → Generate Signed Bundle/APK\n2. Create new keystore (save credentials safely!)\n3. Select **release** build variant\n4. Finish → APK saved in `app/release/`\n\n### For Play Store\n1. Build → Generate Signed Bundle/APK\n2. Select **Android App Bundle (.aab)**\n3. Upload to Google Play Console\n\n## 📞 Need Help?\n\n- Check `README.md` for full documentation\n- Review Android Studio Logcat for errors\n- Verify https://spreadlov.com is accessible\n- Check Firebase Console for FCM setup\n\n---\n\n**Remember:** This project is for Android Studio only. It cannot build or run in Replit!\n","size_bytes":3786},"replit.md":{"content":"# SpreadLov Android Studio Project\n\n## Project Type\n**Android Studio Reference Project** - This is a complete Android app project structure generated as reference files for local development. This project **cannot be built or run in Replit** as it requires Android Studio and Android SDK.\n\n## Project Overview\n- **Purpose:** Generate Android app for SpreadLov dating website (https://spreadlov.com)\n- **Format:** Complete Android Studio project with Kotlin source files\n- **User Intent:** Download these files and import into Android Studio on local machine\n\n## App Details\n- **App Name:** SpreadLov\n- **Package:** com.spreadlov.app\n- **Language:** Kotlin\n- **Min SDK:** 24 (Android 7.0)\n- **Target SDK:** 35 (Android 15)\n- **Theme:** Dark mode (#121212) with pink accent (#E91E63)\n\n## Features Implemented\n1. ✅ Splash screen with fade animation\n2. ✅ Secure WebView (HTTPS-only, domain-restricted)\n3. ✅ Offline detection and retry screen\n4. ✅ Push notifications (Firebase FCM)\n5. ✅ About screen with app info and links\n6. ✅ 3-dot menu (About, Share, Rate)\n7. ✅ Swipe-to-refresh with pink loader\n8. ✅ Back navigation with exit confirmation\n9. ✅ External intent handling (mail, tel, etc.)\n\n## Project Structure\n```\nSpreadLov/\n├── app/\n│   ├── src/main/\n│   │   ├── AndroidManifest.xml\n│   │   ├── java/com/spreadlov/app/\n│   │   │   ├── Activities (Splash, Main, Offline, About)\n│   │   │   └── util/ (WebView, Network, Notifications, Intents, FCM)\n│   │   └── res/ (layouts, values, drawables, menu)\n│   ├── build.gradle.kts\n│   └── google-services.json (placeholder - needs replacement)\n├── build.gradle.kts\n├── settings.gradle.kts\n└── README.md\n```\n\n## Important Notes\n- **Cannot run in Replit:** This requires Android Studio and Android SDK\n- **For download only:** User must import into Android Studio on their machine\n- **Firebase setup required:** Replace placeholder google-services.json with real file\n- **All files complete:** Ready for Android Studio import\n\n## Next Steps for User\n1. Download/clone this project from Replit\n2. Import into Android Studio\n3. Replace `app/google-services.json` with real Firebase config\n4. Sync Gradle and build\n5. Run on Android device/emulator\n\n## Architecture\n- **Activities:** Splash → Main (WebView) ↔ Offline ↔ About\n- **Security:** HTTPS-only, domain restriction, Safe Browsing\n- **Storage:** Cookies and DOM storage enabled for website\n- **Notifications:** FCM service configured (needs Firebase setup)\n\n## User Preferences\n- Requested complete Android Studio project structure\n- Dark theme with pink branding\n- Secure WebView wrapper for dating website\n- Push notification support\n- Share and rate functionality\n","size_bytes":2788}},"version":2}